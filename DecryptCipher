<?php

/*
 * Decrypt cipher
 *
 * This 7/2013 HackerRank challenge was to decrypt a cipher that arranges the letters of the alphabet that
 * don't appear in the keyword into columns below the letters of a keyword.  For example, we take a keyword
 * "SECRET" (remove duplicate letters) and arrange as follows:
 *
 *     SECRT
 *     ABDFG
 *     HIJKL
 *     MNOPQ
 *     UVWXY
 *     Z
 *
 * And then we sort those columns by the letters in the keyword ("SECRT" is sorted as "CERST"):
 *
 *     Original alphabet:        ABCDE FGHIJ KLMNO PQRSTU VWXYZ
 *     Substitution alphabet:    CDJOW EBINV RFKPX SAHMUZ TGLQY
 *
 * For example, message "JHQSU XFXBQ" is translated as "CRYPT OLOGY".
 *
 */

$debug = 0;
$handle = fopen("php://stdin", "r");
$T = trim(fgets($handle));
for ($i = 1; $i <= $T; $i++) {
    $keyword = trim(fgets($handle));
    $message = trim(fgets($handle));
    $length = strlen($keyword);

    // remove duplicate letters from keyword
    $temp_keyword = "";
    $keyword_so_far = "";
    for ($j = 0; $j < $length; $j++) {
        $this_char = substr($keyword, $j, 1);
        if (strpos($keyword_so_far, $this_char) === false) $temp_keyword .= $this_char;
        $keyword_so_far .= $this_char;
    }
    $keyword = $temp_keyword;
    $length = strlen($keyword); // re-calculate once duplicate letters are removed
    if ($debug) echo $keyword . "\n";

    // create 1st line of matrix
    $count = 0;
    $matrix = [];
    for ($j = 0; $j < $length; $j++) {
        $this_char = substr($keyword, $j, 1);
        $matrix[0][$count] = $this_char;
        $headers[$count] = $this_char;
        $count++;
    }

    // create remaining lines of matrix based on alphabet
    $line = 1;
    $count = 0;
    for ($j = 65; $j <= 90; $j++) {
        $this_char = chr($j);
        if (strpos($keyword, $this_char) === false) {
            $matrix[$line][$count] = $this_char;
            $count++;
        }
        if ($count == $length) {
            $count = 0;
            $line++;
        }
    }
    if ($debug) var_dump($matrix);

    // transpose into columns
    $newmatrix = [];
    for ($j = 0; $j < $length; $j++) {
        $this_char = substr($keyword, $j, 1);
        $newmatrix[$this_char] = "";
        for ($l = 0; $l <= $line; $l++) {
            $newmatrix[$this_char] .= $matrix[$l][$j];
        }
    }
    if ($debug) var_dump($newmatrix);

    // sort headers
    sort($headers);
    $header_string = implode("", $headers);
    if ($debug) echo $header_string . "\n";

    // compose substitution alphabet by concatenating sorted columns
    $new_alphabet = "";
    for ($j = 0; $j < $length; $j++) {
        $this_char = substr($header_string, $j, 1);
        $new_alphabet .= $newmatrix[$this_char];
    }
    if ($debug) echo $new_alphabet . "\n";
    if ($debug) echo strlen($new_alphabet) . "\n";
    
    // translate using substitution alphabet
    $decrypted = "";
    $length_message = strlen($message);
    for ($j = 0; $j < $length_message; $j++) {
        $this_char = substr($message, $j, 1);
        if (strpos($new_alphabet, $this_char) === false) {
            $decrypted .= " ";
            continue;
        }
        $position = strpos($new_alphabet, $this_char);
        if ($debug) echo $position . " ";
        $decrypted .= chr($position + 65);
    }

    // output
    echo $decrypted . "\n";

}
?>
